import pygame
import sys
from copy import deepcopy

# Инициализация Pygame
pygame.init()

# Константы
WIDTH = 800
HEIGHT = 800
CELL_SIZE = WIDTH // 8
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (128, 128, 128)
GOLD = (255, 215, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

# Создание окна
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Ставропольские шашки')

class Board:
    def __init__(self):
        # 0 - пустая клетка, 1 - белая шашка, 2 - черная шашка
        self.board = [
            [0, 2, 0, 2, 0, 2, 0, 2],
            [2, 0, 2, 0, 2, 0, 2, 0],
            [0, 2, 0, 2, 0, 2, 0, 2],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 1, 0, 1, 0, 1, 0],
            [0, 1, 0, 1, 0, 1, 0, 1],
            [1, 0, 1, 0, 1, 0, 1, 0]
        ]
        self.kings = set()  # Хранение координат дамок
        self.selected_piece = None
        self.current_player = 1  # 1 - ход белых, 2 - ход черных
        self.valid_moves = []
        self.must_capture = False
        self.last_captured = None
        self.winner = None  # Добавляем переменную для хранения победителя

    def draw(self, screen):
        # Отрисовка доски
        for row in range(8):
            for col in range(8):
                # Отрисовка клеток
                color = WHITE if (row + col) % 2 == 0 else GRAY
                pygame.draw.rect(screen, color, (col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE))
                
                # Отрисовка шашек
                if self.board[row][col] != 0:
                    color = WHITE if self.board[row][col] == 1 else BLACK
                    pygame.draw.circle(screen, color, 
                                    (col * CELL_SIZE + CELL_SIZE // 2, 
                                     row * CELL_SIZE + CELL_SIZE // 2), 
                                    CELL_SIZE // 2 - 10)
                    
                    # Отрисовка дамок
                    if (row, col) in self.kings:
                        pygame.draw.circle(screen, GOLD,
                                        (col * CELL_SIZE + CELL_SIZE // 2,
                                         row * CELL_SIZE + CELL_SIZE // 2),
                                        CELL_SIZE // 4 - 5)

    def get_valid_moves(self, row, col):
        # Получение всех возможных ходов для выбранной шашки
        moves = []
        piece = self.board[row][col]
        is_king = (row, col) in self.kings

        # Проверяем наличие обязательных взятий на доске
        captures = self.get_all_captures()
        if captures:
            return self.get_piece_captures(row, col, is_king)

        # Если нет обязательных взятий, проверяем обычные ходы
        if is_king:
            # Ходы для дамки
            directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
            for dx, dy in directions:
                curr_row, curr_col = row + dx, col + dy
                while 0 <= curr_row < 8 and 0 <= curr_col < 8 and self.board[curr_row][curr_col] == 0:
                    moves.append((curr_row, curr_col))
                    curr_row += dx
                    curr_col += dy
        else:
            # Ходы для обычной шашки
            direction = -1 if piece == 1 else 1
            for dx in [-1, 1]:
                new_row = row + direction
                new_col = col + dx
                if 0 <= new_row < 8 and 0 <= new_col < 8 and self.board[new_row][new_col] == 0:
                    moves.append((new_row, new_col))

        return moves

    def get_all_captures(self):
        # Получение всех возможных взятий на доске
        captures = []
        for row in range(8):
            for col in range(8):
                if self.board[row][col] != 0:
                    piece_captures = self.get_piece_captures(row, col, (row, col) in self.kings)
                    if piece_captures:
                        captures.extend(piece_captures)
        return captures

    def get_piece_captures(self, row, col, is_king):
        captures = []
        piece = self.board[row][col]
        
        if is_king:
            directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
            for dx, dy in directions:
                curr_row, curr_col = row + dx, col + dy
                found_enemy = False
                enemy_pos = None
                
                while 0 <= curr_row < 8 and 0 <= curr_col < 8:
                    if self.board[curr_row][curr_col] != 0:
                        if not found_enemy and self.board[curr_row][curr_col] != piece:
                            found_enemy = True
                            enemy_pos = (curr_row, curr_col)
                        else:
                            break
                    elif found_enemy:  # После нахождения врага все пустые клетки доступны для хода
                        captures.append((curr_row, curr_col))
                    
                    curr_row += dx
                    curr_col += dy
        else:
            for dx, dy in [(-2, -2), (-2, 2), (2, -2), (2, 2)]:
                new_row = row + dx
                new_col = col + dy
                if 0 <= new_row < 8 and 0 <= new_col < 8 and self.board[new_row][new_col] == 0:
                    mid_row = row + dx//2
                    mid_col = col + dy//2
                    if self.board[mid_row][mid_col] != 0 and self.board[mid_row][mid_col] != piece:
                        captures.append((new_row, new_col))

        return captures

    def check_winner(self):
        white_pieces = 0
        black_pieces = 0
        
        # Подсчитываем количество шашек каждого цвета
        for row in range(8):
            for col in range(8):
                if self.board[row][col] == 1:
                    white_pieces += 1
                elif self.board[row][col] == 2:
                    black_pieces += 1
        
        # Определяем победителя
        if white_pieces == 0:
            self.winner = "Черные"
        elif black_pieces == 0:
            self.winner = "Белые"
    
    def make_move(self, start, end):
        start_row, start_col = start
        end_row, end_col = end
        piece = self.board[start_row][start_col]
        is_king = (start_row, start_col) in self.kings
        was_capture = False
        
        # Выполнение хода
        self.board[end_row][end_col] = piece
        self.board[start_row][start_col] = 0
        
        # Обработка взятия
        if is_king:
            # Определяем направление движения
            dx = 1 if end_row > start_row else -1
            dy = 1 if end_col > start_col else -1
            
            # Проходим по всем клеткам между начальной и конечной позицией
            curr_row, curr_col = start_row + dx, start_col + dy
            while curr_row != end_row or curr_col != end_col:
                if self.board[curr_row][curr_col] != 0:
                    # Если находим шашку, удаляем её
                    self.board[curr_row][curr_col] = 0
                    if (curr_row, curr_col) in self.kings:
                        self.kings.remove((curr_row, curr_col))
                    was_capture = True
                curr_row += dx
                curr_col += dy
        else:
            # Для обычных шашек логика остается прежней
            if abs(start_row - end_row) == 2:
                mid_row = (start_row + end_row) // 2
                mid_col = (start_col + end_col) // 2
                self.board[mid_row][mid_col] = 0
                if (mid_row, mid_col) in self.kings:
                    self.kings.remove((mid_row, mid_col))
                was_capture = True
        
        # Обработка дамок
        if is_king:
            # Если шашка уже была дамкой, просто перемещаем статус дамки
            self.kings.remove((start_row, start_col))
            self.kings.add((end_row, end_col))
        elif (piece == 1 and end_row == 0) or (piece == 2 and end_row == 7):
            # Превращаем в дамку только если достигнута последняя горизонталь
            self.kings.add((end_row, end_col))
        
        # Проверяем возможность продолжения взятия
        if was_capture:
            next_captures = self.get_piece_captures(end_row, end_col, (end_row, end_col) in self.kings)
            if not next_captures:
                # Если нет возможности продолжить взятие, передаем ход
                self.current_player = 3 - self.current_player
        else:
            # Если не было взятия, сразу передаем ход
            self.current_player = 3 - self.current_player
        
        # Проверяем на окончание игры после каждого хода
        self.check_winner()

def main():
    game_board = Board()
    clock = pygame.time.Clock()
    font = pygame.font.Font(None, 36)
    
    while True:
        clock.tick(60)
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            
            # Обрабатываем клики только если игра не закончена
            if not game_board.winner:
                if event.type == pygame.MOUSEBUTTONDOWN:
                    x, y = pygame.mouse.get_pos()
                    col = x // CELL_SIZE
                    row = y // CELL_SIZE
                    
                    if 0 <= row < 8 and 0 <= col < 8:
                        if game_board.selected_piece is None:
                            if game_board.board[row][col] != 0:  # Можно выбрать любую шашку
                                game_board.selected_piece = (row, col)
                                game_board.valid_moves = game_board.get_valid_moves(row, col)
                        else:
                            if (row, col) in game_board.valid_moves:
                                game_board.make_move(game_board.selected_piece, (row, col))
                                # После хода проверяем возможность продолжения взятия
                                if game_board.get_piece_captures(row, col, (row, col) in game_board.kings):
                                    game_board.selected_piece = (row, col)
                                    game_board.valid_moves = game_board.get_piece_captures(row, col, (row, col) in game_board.kings)
                                else:
                                    game_board.selected_piece = None
                                    game_board.valid_moves = []
                            else:
                                game_board.selected_piece = None
                                game_board.valid_moves = []
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_r:
                # Перезапуск игры при нажатии R
                game_board = Board()
        
        # Отрисовка
        screen.fill(WHITE)
        game_board.draw(screen)
        
        if game_board.winner:
            # Отображение победителя
            winner_text = f"Победили {game_board.winner}! Нажмите R для новой игры"
            text_surface = font.render(winner_text, True, BLACK)
            text_rect = text_surface.get_rect(center=(WIDTH//2, HEIGHT//2))
            # Добавляем фон для текста
            pygame.draw.rect(screen, WHITE, 
                           (text_rect.x - 10, text_rect.y - 10,
                            text_rect.width + 20, text_rect.height + 20))
            screen.blit(text_surface, text_rect)
        else:
            # Отображение текущего хода
            turn_text = "Ход: Белые" if game_board.current_player == 1 else "Ход: Черные"
            text_surface = font.render(turn_text, True, BLACK)
            screen.blit(text_surface, (10, HEIGHT - 40))
        
        # Подсветка выбранной шашки и доступных ходов только если игра не закончена
        if not game_board.winner:
            if game_board.selected_piece:
                row, col = game_board.selected_piece
                pygame.draw.circle(screen, YELLOW,
                                (col * CELL_SIZE + CELL_SIZE // 2,
                                 row * CELL_SIZE + CELL_SIZE // 2),
                                 CELL_SIZE // 2 - 5)
            
            if game_board.selected_piece and game_board.valid_moves:
                for move in game_board.valid_moves:
                    row, col = move
                    pygame.draw.circle(screen, GREEN,
                                    (col * CELL_SIZE + CELL_SIZE // 2,
                                     row * CELL_SIZE + CELL_SIZE // 2),
                                    15)
        
        pygame.display.flip()

if __name__ == "__main__":
    main()
